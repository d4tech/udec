'use strict';

describe('Unit: CryptoMan', function() {
	var CryptoMan,
		JSONFormatter,
		Wrangler;

	beforeEach(function() {
		module('udecApp');

		inject(function($injector) {
		    CryptoMan = $injector.get('CryptoMan');
		    JSONFormatter = $injector.get('JSONFormatter');
		    Wrangler = $injector.get('Wrangler');
			}
		);
	});

	it('Should Initialize', function() {
		expect(angular.isFunction(CryptoMan.getRand)).toBeTruthy();
		expect(angular.isFunction(CryptoMan.setKey)).toBeTruthy();
		expect(angular.isFunction(CryptoMan.encrypt)).toBeTruthy();
		expect(angular.isFunction(CryptoMan.decrypt)).toBeTruthy();
	});

	it('CryptoMan.getRand should return some Random value', function () {
		expect(CryptoMan.getRand()).not.toBeUndefined();
	});

	it('CryptoMan.setKey should return some Value', function() {
		expect(CryptoMan.setKey()).not.toBeUndefined();
	});

	describe('Encrypt/Decrypt Test: ', function() {
		/*xit('Should throw an ERR:', function() {
			var args = JSONFormatter.parse({
				key : '123456',
				iv  : 'abcd',
			});
			expect(CryptoMan.encrypt(args)).toThrow();
		});*/

		it('Should return encrypted data', function () {
			var args = JSONFormatter.parse({
				key : '123456',
				iv  : 'abcd',
			});
			//Call the Encryption function in Angulars service instance
			var FactoryEncrypted = CryptoMan.encrypt('Hello There',args);
			var encrypted = CryptoJS.AES.encrypt(
				'Hello There',
				args.key,{
					iv:args.iv,
					mode: CryptoJS.mode.CBC,
                    padding: CryptoJS.pad.Pkcs7
				}
			);

			// expect(FactoryEncrypted).not.toBeUndefined();
			// The entire object as such cannot be checked for Equality, it'll give the 13-inch error
			//Check the ciphertext returned by the CryptoMan service is exactly equal 
			// to the Ciphertext generated by the encrypted object make sure the parameters are the same
			expect(encrypted.ciphertext.toString()).toEqual(FactoryEncrypted.ciphertext.toString());
			expect(encrypted.ciphertext.toString() === FactoryEncrypted.ciphertext.toString()).toBeTruthy();
		});

		it('Takes in Utf8 values, encrypts it and then successfully decrypts it', function() {
			var args = {
				key : CryptoMan.setKey(),
				iv  : CryptoMan.getRand()
			};

			var encrypted = CryptoMan.encrypt('Hello There',args);
			args.ct = Wrangler.getString(encrypted.ciphertext);
			
			// console.log('FactoryDecrypted' + FactoryDecrypted);
			// expect(angular.isFunction(decrypted)).not.toBeUndefined();
			// expect(angular.isFunction(decrypted.toString())).not.toBeUndefined();
			expect(CryptoMan.decrypt(args)).toEqual('Hello There');
			// console.log(decrypted);
			// expect(decrypted.toString()).toEqual(decryptArgs.ct);
		});
	});
});